import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { Link } from 'wouter';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { CalendarIcon, MapPinIcon, User2Icon } from 'lucide-react';
import { Category, Event } from '@shared/schema';
import EventCategory from '@/components/EventCategory';
import { Badge } from '@/components/ui/badge';

// Helper to format date
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    day: 'numeric',
    month: 'short',
    year: 'numeric',
  });
};

const Home: React.FC = () => {
  // Fetch featured events
  const { 
    data: featuredEvents,
    isLoading: isLoadingFeatured,
    error: featuredError
  } = useQuery<Event[]>({
    queryKey: ['/api/events/featured'],
    queryFn: async () => {
      const response = await fetch('/api/events/featured?limit=3');
      if (!response.ok) {
        throw new Error('Failed to fetch featured events');
      }
      return response.json();
    }
  });

  // Fetch categories
  const { 
    data: categories,
    isLoading: isLoadingCategories,
    error: categoriesError
  } = useQuery<Category[]>({
    queryKey: ['/api/categories'],
    queryFn: async () => {
      const response = await fetch('/api/categories');
      if (!response.ok) {
        throw new Error('Failed to fetch categories');
      }
      return response.json();
    }
  });

  // Group categories into technical and non-technical
  const technicalCategories = categories?.filter(cat => 
    ['Workshop', 'Hackathon', 'Conference', 'Webinar', 'Tech Meetup'].includes(cat.name)
  ) || [];
  
  const nonTechnicalCategories = categories?.filter(cat => 
    ['Music', 'Sports', 'Arts', 'Food & Drink', 'Cultural'].includes(cat.name)
  ) || [];

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-primary-50 to-primary-100 rounded-lg p-8 mb-12">
        <div className="max-w-2xl">
          <h1 className="text-4xl font-bold mb-4">Discover Amazing Events</h1>
          <p className="text-xl text-gray-700 mb-6">
            Find and book tickets for the best technical and non-technical events happening around you.
          </p>
          <div className="flex space-x-4">
            <Link href="/events">
              <Button size="lg">Browse Events</Button>
            </Link>
            <Link href="/categories">
              <Button variant="outline" size="lg">Explore Categories</Button>
            </Link>
          </div>
        </div>
      </div>

      {/* Featured Events Section */}
      <section className="mb-16">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold">Featured Events</h2>
          <Link href="/events">
            <Button variant="ghost">View All Events</Button>
          </Link>
        </div>

        {isLoadingFeatured ? (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[1, 2, 3].map((i) => (
              <Card key={i} className="overflow-hidden">
                <Skeleton className="h-48 w-full" />
                <CardContent className="p-6">
                  <Skeleton className="h-6 w-3/4 mb-2" />
                  <Skeleton className="h-4 w-1/2 mb-4" />
                  <Skeleton className="h-4 w-full mb-2" />
                  <Skeleton className="h-4 w-full mb-2" />
                  <Skeleton className="h-4 w-3/4" />
                </CardContent>
              </Card>
            ))}
          </div>
        ) : featuredError ? (
          <div className="text-center p-8 bg-red-50 text-red-600 rounded-lg">
            Failed to load featured events. Please try again later.
          </div>
        ) : !featuredEvents || featuredEvents.length === 0 ? (
          <div className="text-center p-8 bg-gray-50 text-gray-500 rounded-lg">
            No featured events available at the moment.
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {featuredEvents.map((event) => (
              <Link key={event.id} href={`/events/${event.id}`}>
                <Card className="overflow-hidden h-full hover:shadow-lg transition-shadow duration-300 cursor-pointer">
                  <div className="h-48 overflow-hidden relative">
                    {event.imageUrl ? (
                      <img
                        src={event.imageUrl}
                        alt={event.title}
                        className="w-full h-full object-cover transition-transform hover:scale-105 duration-300"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-200 flex items-center justify-center">
                        <span className="text-gray-400">No image</span>
                      </div>
                    )}
                    <Badge className="absolute top-2 right-2 bg-primary">Featured</Badge>
                  </div>
                  <CardContent className="p-6">
                    <h3 className="text-xl font-semibold mb-2 line-clamp-1">{event.title}</h3>
                    <p className="text-sm text-gray-600 mb-4 line-clamp-2">{event.description}</p>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center text-gray-500">
                        <CalendarIcon className="h-4 w-4 mr-2" />
                        <span>{formatDate(event.startDate.toString())}</span>
                      </div>
                      <div className="flex items-center text-gray-500">
                        <MapPinIcon className="h-4 w-4 mr-2" />
                        <span className="line-clamp-1">{event.location}</span>
                      </div>
                      <div className="flex items-center text-gray-500">
                        <User2Icon className="h-4 w-4 mr-2" />
                        <span>{event.availableTickets} spots left</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        )}
      </section>

      {/* Technical Events Section */}
      <section className="mb-16">
        <h2 className="text-3xl font-bold mb-8">Technical Events</h2>
        
        {isLoadingCategories ? (
          <div className="space-y-8">
            {[1, 2].map((i) => (
              <div key={i} className="animate-pulse">
                <Skeleton className="h-8 w-1/3 mb-4" />
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {[1, 2, 3].map((j) => (
                    <Skeleton key={j} className="h-64 w-full" />
                  ))}
                </div>
              </div>
            ))}
          </div>
        ) : categoriesError ? (
          <div className="text-center p-8 bg-red-50 text-red-600 rounded-lg">
            Failed to load categories. Please try again later.
          </div>
        ) : technicalCategories.length === 0 ? (
          <div className="text-center p-8 bg-gray-50 text-gray-500 rounded-lg">
            No technical categories available.
          </div>
        ) : (
          <div className="space-y-12">
            {technicalCategories.slice(0, 3).map((category) => (
              <EventCategory key={category.id} category={category} />
            ))}
            
            {technicalCategories.length > 3 && (
              <div className="text-center mt-8">
                <Link href="/events?type=technical">
                  <Button variant="outline" size="lg">View All Technical Events</Button>
                </Link>
              </div>
            )}
          </div>
        )}
      </section>

      {/* Non-Technical Events Section */}
      <section className="mb-16">
        <h2 className="text-3xl font-bold mb-8">Non-Technical Events</h2>
        
        {isLoadingCategories ? (
          <div className="space-y-8">
            {[1, 2].map((i) => (
              <div key={i} className="animate-pulse">
                <Skeleton className="h-8 w-1/3 mb-4" />
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {[1, 2, 3].map((j) => (
                    <Skeleton key={j} className="h-64 w-full" />
                  ))}
                </div>
              </div>
            ))}
          </div>
        ) : categoriesError ? (
          <div className="text-center p-8 bg-red-50 text-red-600 rounded-lg">
            Failed to load categories. Please try again later.
          </div>
        ) : nonTechnicalCategories.length === 0 ? (
          <div className="text-center p-8 bg-gray-50 text-gray-500 rounded-lg">
            No non-technical categories available.
          </div>
        ) : (
          <div className="space-y-12">
            {nonTechnicalCategories.slice(0, 3).map((category) => (
              <EventCategory key={category.id} category={category} />
            ))}
            
            {nonTechnicalCategories.length > 3 && (
              <div className="text-center mt-8">
                <Link href="/events?type=non-technical">
                  <Button variant="outline" size="lg">View All Non-Technical Events</Button>
                </Link>
              </div>
            )}
          </div>
        )}
      </section>

      {/* Call to Action */}
      <section className="bg-primary-600 text-white rounded-lg p-12 text-center">
        <h2 className="text-3xl font-bold mb-4">Ready to Host Your Own Event?</h2>
        <p className="text-xl mb-8 max-w-2xl mx-auto">
          Join as an organizer and start creating exceptional events on our platform today.
        </p>
        <Link href="/register?role=organizer">
          <Button variant="secondary" size="lg">Become an Organizer</Button>
        </Link>
      </section>
    </div>
  );
};

export default Home;